{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Clock","props","state","date","Date","this","timerID","setInterval","tick","clearInterval","setState","toLocaleString","React","Component","parseData","response","data","length","result","includedMap","included","reduce","obj","x","id","rowData","innerResult","schedule","relationships","route","stop","trip","rawArrival","attributes","arrival_time","arrival","toLocaleTimeString","hour","minute","rawDeparture","departure_time","departure","status","to","direction_destinations","direction_id","from","track_number","platform_code","train_number","name","push","sort","a","b","aTime","bTime","TableExample","model","request","XMLHttpRequest","onload","JSON","parse","open","send","map","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.237c1d58.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\n\r\nimport { Table, Thead, Tbody, Tr, Th, Td } from 'react-super-responsive-table'\r\nimport 'react-super-responsive-table/dist/SuperResponsiveTableStyle.css'\r\n\r\nclass Clock extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {date: new Date()};\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.timerID = setInterval(\r\n      () => this.tick(),\r\n      1000\r\n    );\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      date: new Date()\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>SOUTH STATION DEPARTURE BOARD</h1>\r\n        <h2> {this.state.date.toLocaleString()}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction parseData(response) {\r\n\tif (response.data.length <= 0) {\r\n\t\treturn [];\r\n\t}\r\n\t\r\n\tlet result = [];\r\n\tlet includedMap = response.included.reduce((obj, x) => { obj[x.id] = x; return obj }, {});\r\n\t// Arrival, Departure, To, From, Train#, Track#, Status\r\n\tfor (let rowData of response.data) {\r\n\t\tlet innerResult = {};\r\n\t\tlet schedule = includedMap[rowData.relationships.schedule.data.id];\r\n\t\tlet route = includedMap[rowData.relationships.route.data.id];\r\n\t\tlet stop = includedMap[rowData.relationships.stop.data.id];\r\n\t\tlet trip = includedMap[rowData.relationships.trip.data.id];\r\n\t\t\r\n\t\tinnerResult.rawArrival = schedule.attributes.arrival_time;\r\n\t\tinnerResult.arrival = innerResult.rawArrival ? (new Date(innerResult.rawArrival).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})) : \" - -: - - \";\r\n\t\t\r\n\t\tinnerResult.rawDeparture = schedule.attributes.departure_time;\r\n\t\tinnerResult.departure = innerResult.rawDeparture ? (new Date(innerResult.rawDeparture).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})) : \" - - : - - \";\r\n\t\t\r\n\t\tinnerResult.status = rowData.attributes.status;\r\n\t\tinnerResult.to = route.attributes.direction_destinations[schedule.attributes.direction_id];\r\n\t\tinnerResult.from = route.attributes.direction_destinations[(schedule.attributes.direction_id + 1) % 2];\r\n\t\tinnerResult.track_number = stop.attributes.platform_code;\r\n\t\tinnerResult.train_number = trip.attributes.name;\r\n\t\t\r\n\t\tresult.push(innerResult);\r\n\t}\r\n\tresult.sort((a, b) => {\r\n\t\tlet aTime = a.rawArrival || a.rawDeparture;\r\n\t\tlet bTime = b.rawArrival || b.rawDeparture;\r\n\t\t\r\n\t\treturn aTime !== bTime ? new Date(aTime) > new Date(bTime) ? 1 : -1 : 0;\r\n\t});\r\n\treturn result;\r\n}\r\n\r\nclass TableExample extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\t\r\n\t\tthis.state = { model: [] }\r\n\t}\r\n\t\r\n\ttick() {\r\n\t\tthis.request = new XMLHttpRequest();\r\n\t\tthis.request.onload = () => {\r\n\t\t\tlet response = JSON.parse(this.request.response);\r\n\t\t\tthis.setState({ model: parseData(response)});\r\n\t\t}\r\n\t\t// request data for South Station\r\n\t\tthis.request.open(\"GET\", \"https://api-v3.mbta.com/predictions?include=trip,stop,schedule,route&filter%5Bstop%5D=place-sstat&filter[route_type]=2&fields[prediction]=arrival_time,departure_time,status\", true);\r\n\t\tthis.request.send();\r\n\t}\r\n\t\r\n\t\r\n\tcomponentDidMount() {\r\n\t\tthis.tick();\r\n\t\tthis.timerID = setInterval(\r\n\t\t  () => this.tick(),\r\n\t\t  15000\r\n\t\t);\r\n\t}\r\n\r\n\tcomponentWillUnmount() {\r\n\t\tclearInterval(this.timerID);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Table>\r\n\t\t\t  <Thead>\r\n\t\t\t\t<Tr>\r\n\t\t\t\t  <Th>Arrival</Th>\r\n\t\t\t\t  <Th>Departure</Th>\r\n\t\t\t\t  <Th>From</Th>\r\n\t\t\t\t  <Th>To</Th>\r\n\t\t\t\t  <Th>Train#</Th>\r\n\t\t\t\t  <Th>Track#</Th>\r\n\t\t\t\t  <Th>Status</Th>\r\n\t\t\t\t</Tr>\r\n\t\t\t  </Thead>\r\n\t\t\t  <Tbody>\r\n\t\t\t    {this.state.model.map( rowData => {\r\n\t\t\t\t\treturn <Tr>\r\n\t\t\t\t\t\t     <Td>{rowData.arrival}</Td>\r\n\t\t\t\t\t\t     <Td>{rowData.departure}</Td>\r\n\t\t\t\t\t\t     <Td>{rowData.from}</Td>\r\n\t\t\t\t\t\t     <Td>{rowData.to}</Td>\r\n\t\t\t\t\t\t     <Td>{rowData.train_number}</Td>\r\n\t\t\t\t\t\t     <Td>{rowData.track_number}</Td>\r\n\t\t\t\t\t\t     <Td>{rowData.status}</Td>\r\n\t\t\t\t\t\t   </Tr>\r\n\t\t\t\t})}\r\n\t\t\t  </Tbody>\r\n\t\t\t</Table>\r\n\t\t  )\r\n\t}\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Clock />\r\n      <TableExample />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}